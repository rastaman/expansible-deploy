---
# tasks file for roles/ceph-admin

- name: Create ssh key if not exist
  sudo: True
  user: name={{ceph_user}} generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file=.ssh/id_rsa
  when: ceph_install_mode == "base_setup"

- name: Get back the key (private and public) to host
  fetch: src=/home/{{ceph_user}}/.ssh/{{ item }} dest=keys/{{ceph_user}}-{{ ansible_hostname }}-{{ item }} flat=yes
  sudo: True
  with_items:
    - id_rsa
    - id_rsa.pub
  when: ceph_install_mode == "base_setup"

- name: Setup ssh configuration of the admin node to access ceph nodes
  template: src=./ssh_config.j2 dest=/home/{{ceph_user}}/.ssh/config
  remote_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "base_setup"

- name: Give the right permissions to the ssh config
  file: name=/home/{{ceph_user}}/.ssh/config mode=0440 state=file owner={{ceph_user}}
  sudo: True
  when: ceph_install_mode == "base_setup"

- name: Add public key to ceph nodes and users
  authorized_key: user={{ ceph_user }} key="{{ lookup('file', 'keys/'+ ceph_user + '-' + ceph_admin_node + '-id_rsa.pub') }}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Establish first ssh connection as the ceph user
  shell: ssh -o StrictHostKeyChecking=no {{ceph_user}}@{{item}} "echo pong" >> first_conn.txt
  remote_user: "{{ceph_user}}"
  sudo: True
  sudo_user: "{{ceph_user}}"
  when: ceph_install_mode == "create_cluster"
  with_items:
    - node1
    - node2
    - node3
    - dk1

- name: Uninstall nodes so the installation is repeatable
  shell: ceph-deploy uninstall {{ceph_nodes}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Remove other support packages not cleaned by the previous step
  shell: ssh -o StrictHostKeyChecking=no {{ceph_user}}@{{item}} "sudo yum remove -y python-rados python-cephfs librados2 librbd1 python-rbd libcephfs1" >>ceph_install.log
  sudo: True
  sudo_user: "{{ceph_user}}"
  when: ceph_install_mode == "create_cluster"
  with_items:
    - node1
    - node2
    - node3
    - dk1

- name: Purge data of nodes
  shell: ceph-deploy purgedata {{ceph_nodes}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Remove existing keys
  shell: ceph-deploy forgetkeys
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Remove existing Object Store Devices on nodes
  shell: ssh -o StrictHostKeyChecking=no {{ceph_user}}@{{item}} "sudo rm -rf /var/local/osd-{{item}}" >>ceph_install.log
  sudo: True
  sudo_user: "{{ceph_user}}"
  when: ceph_install_mode == "create_cluster"
  with_items:
    - node1
    - node2
    - node3

- name: Create the ceph cluster configuration folder
  file: name=/home/{{ceph_user}}/{{ceph_cluster}} state=directory
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Create the cluster
  shell: ceph-deploy new {{ceph_nodes}} chdir=/home/{{ceph_user}}/{{ceph_cluster}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Configure replication factor
  ini_file: dest=/home/{{ceph_user}}/{{ceph_cluster}}/ceph.conf section=global option="osd pool default size" value=2 mode=0600 backup=yes
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Configure network
  ini_file: dest=/home/{{ceph_user}}/{{ceph_cluster}}/ceph.conf section=global option="public network" value={{ceph_public_ip}}/{{ceph_netmask}} mode=0600 backup=yes
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Disable cephx (cluster)
  ini_file: dest=/home/{{ceph_user}}/{{ceph_cluster}}/ceph.conf section=global option="auth cluster required" value="none" mode=0600 backup=no
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Disable cephx (service)
  ini_file: dest=/home/{{ceph_user}}/{{ceph_cluster}}/ceph.conf section=global option="auth service required" value="none" mode=0600 backup=no
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Disable cephx (client)
  ini_file: dest=/home/{{ceph_user}}/{{ceph_cluster}}/ceph.conf section=global option="auth client required" value="none" mode=0600 backup=no
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Disable cephx (auth)
  ini_file: dest=/home/{{ceph_user}}/{{ceph_cluster}}/ceph.conf section=global option="auth supported" value="none" mode=0600 backup=no
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Install the cluster
  shell: ceph-deploy install {{ceph_nodes}} {{ceph_admin_node}} chdir=/home/{{ceph_user}}/{{ceph_cluster}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_cluster"

- name: Init OSD deamon
  shell: ceph-deploy mon create-initial chdir=/home/{{ceph_user}}/{{ceph_cluster}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "init_cluster"

- name: Set config and keys paths
  set_fact:
    ceph_config_keys:
      - /home/{{ceph_user}}/{{ceph_cluster}}/ceph.bootstrap-mds.keyring
      - /home/{{ceph_user}}/{{ceph_cluster}}/ceph.bootstrap-osd.keyring
      - /home/{{ceph_user}}/{{ceph_cluster}}/ceph.bootstrap-rgw.keyring
      - /home/{{ceph_user}}/{{ceph_cluster}}/ceph.client.admin.keyring
      - /home/{{ceph_user}}/{{ceph_cluster}}/ceph.conf
      - /home/{{ceph_user}}/{{ceph_cluster}}/ceph.log
      - /home/{{ceph_user}}/{{ceph_cluster}}/ceph.mon.keyring
  when: ceph_install_mode == "init_cluster"

#- name: Move one file to test
#  stat: path=/home/{{ceph_user}}/{{ceph_cluster}}/ceph.mon.keyring
#  register: keyring_stat
#  remote_user: "{{ceph_user}}"
#  sudo_user: "{{ceph_user}}"
#  sudo: True
#  when: ceph_install_mode == "init_cluster"

#- name: Move testfile to a backup
#  command: mv /home/{{ceph_user}}/{{ceph_cluster}}/ceph.mon.keyring /home/{{ceph_user}}/{{ceph_cluster}}/ceph.mon.keyring.bak
#  when: keyring_stat.stat.exists
#  remote_user: "{{ceph_user}}"
#  sudo_user: "{{ceph_user}}"
#  sudo: True

- name: Stat for Ceph config and keys
  stat: >
    path={{ item }}
  with_items: ceph_config_keys
  ignore_errors: true
  register: statconfig
  when: ceph_install_mode == "init_cluster"
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True

- name: Check that every file exist
  fail: msg="{{item.item}} didn't exist!"
  when: (ceph_install_mode == "init_cluster") and (not item.stat.exists)
  with_items: statconfig.results
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True

#ceph-deploy osd prepare node2:/var/local/osd0 node3:/var/local/osd1
#ceph-deploy osd activate node2:/var/local/osd0 node3:/var/local/osd1

- name: Prepare the OSD volumes
  shell: ceph-deploy osd prepare {{ceph_volumes_path}} chdir=/home/{{ceph_user}}/{{ceph_cluster}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_osd"

- name: Activate the OSD volumes
  shell: ceph-deploy osd activate {{ceph_volumes_path}} chdir=/home/{{ceph_user}}/{{ceph_cluster}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_osd"

- name: Deploy keys and conf
  shell: ceph-deploy admin {{ceph_admin_node}} {{ceph_nodes}} chdir=/home/{{ceph_user}}/{{ceph_cluster}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_osd"

- name: Check cluster health
  shell: ceph health chdir=/home/{{ceph_user}}/{{ceph_cluster}}
  remote_user: "{{ceph_user}}"
  sudo_user: "{{ceph_user}}"
  sudo: True
  when: ceph_install_mode == "create_osd"
  